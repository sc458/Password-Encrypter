MainApplication:


/**
	 * Menu Open View.
	 */
	private AnchorPane menuOp;
	private Button clMenu;
	private Button encBut;
	private Button decBut;
	private Button newMPwdBut;
	private MenuButton setBut;
	private Separator sep;
	private AnchorPane movErrP;
	private Button movClErrP;
	private Label movEncNoMPLa;
	private Label movDecNoMPLa;
	private Label movDecNoPwsLa;
	private Label errorI;

	/**
	 * Encrypt View.
	 */
	private AnchorPane encV;
	private Button encBaBut;
	private ScrollPane encSc;
	private ArrayList<PasswordField[]> encPwds;
	private ArrayList<TextField[]> encPwdTs;
	private ArrayList<TextField[]> encT;
	private ArrayList<AnchorPane> encBs;
	private CheckBox encSPwds;
	private VBox encCon;
	private AnchorPane pmP;
	private Button pBut;
	private Button mBut;

	private Button saveBut;
	private AnchorPane encMsgP;
	private Button encAg;
	private Button encDo;
	private Label encErrI;
	private Label encDoI;
	private Button encClI;
	private Label encDoLa;
	private Label encWrMP;
	private Label encMuErr;
	private Label encExistErr;
	private Label encMissErr;
	private Label encNoEntry;
	private Label encDiPws;
	private Button encDisBut;
	private Button encOKBut;
	private Button encChBut;
	private PasswordField encMPwd;
	private TextField encMPwdT;
	private AnchorPane encOvP;
	private Button encOvClBut;
	private Label encOvQuest;
	private Label encOvNoMP;
	private Label encOvWrMP;

	/**
	 * Decrypt View.
	 */
	private AnchorPane decV;
	private Button decBaBut;
private Button decDelBut;
	private Button decChBut;
	private Button decShBut;
	private ArrayList<Button> decPwds;
	private ScrollPane decSc;
	private GridPane decCon;
	private PasswordField decPwd;
	private TextField decPwdT;
	private CheckBox decSPwd;
	private Button decOKBut;
	private Button decCaBut;
	private AnchorPane decMsgP;
	private Button decClI;
	private Label decDoLa;
	private Label decErrLa;
	private Label decNoMP;
	private Label decWrMP;
	private Label decDel;
	private Label decSuc;

	private Stage ocSt;
	private Scene ocScene;
	private Button ocStCl;
	private Button ocStCh;
	private ArrayList<TextField> ocStTs;
	private ArrayList<String> ocStOldVals;
	private Button ocStOK;
	private ScrollPane ocStSc;
	private GridPane ocStCon;
	private AnchorPane ocStButP;
	private AnchorPane ocMainFrame;


	/**
	 * New Password View.
	 */
	private AnchorPane newMPwdView;
	private Button newBaBut;
	private RadioButton chPwd;
	private RadioButton genPwd;
	private ToggleGroup howToChNew;
	private VBox togVBox;
	private PasswordField newPwd;
	private TextField newPwdT;
	private PasswordField repNewPwd;
	private TextField repNewPwdT;
	private Button newPwdValBut;
	private PasswordField oldPwd;
	private TextField oldPwdT;
	private CheckBox newPwdS;
	private Label lockLa;
	private AnchorPane newErrP;
	private Label newMPDiPwds;
	private Label newMPSa;
	private Label newMPNoF;
	private Label newMPNoS;
	private Label newMPNoOld;
	private Label newMPWrMP;
	private Label newMPTooShort;
	private Button clNewErrP;
	private Label newMPErrI;
	private Label newMPSaI;
	private Button newMPDoBut;
	private Button newMPAgBut;

	private EventHandler<KeyEvent> fireOnEsc;
	private EventHandler<KeyEvent> fireOnOpV;
	private EventHandler<KeyEvent> fireOnOcEsc;
	private EventHandler<KeyEvent> fireOnOc;
----------------

		/**
		 * Closed menu view.
		 */		
		menuCl = new AnchorPane();
		VC.setAn(FC.empty, 0.0, 0.0, menuCl);

		opMenu = VC.getNewImBut(controller.menuI, FC.mcvBut, FC.inWi, FC.inHe, fewLineHa);
		menuCl.getChildren().add(opMenu);

		/**
		 * Open menu view.
		 */
		menuOp = new AnchorPane();
		VC.setAn(FC.empty, 0.0, 0.0, menuOp);	

		clMenu = VC.getNewImBut(controller.clI, FC.movCl, FC.inWi,	FC.inHe, fewLineHa);

		encBut = VC.getNewBut(names.encButN, FC.movEnc, FC.inMT, true, encButHa);
		decBut = VC.getNewBut(names.decButN, FC.movDec, FC.inMT, true, decButHa);
		newMPwdBut = VC.getNewBut(names.newMPwdButN, FC.movNew, FC.inMT, true, fewLineHa);


		
		setBut = new MenuButton(names.setButN, controller.setI, menuHelp, menuLanguage);
		setBut.setPopupSide(Side.TOP);
		setBut.setFont(VC.getFont(mainFrac));

		controller.setI.fitWidthProperty().bind(setBut.widthProperty().divide(FC.setIDiv));
		controller.setI.fitHeightProperty().bind(setBut.heightProperty());

		VC.setAn(FC.movSet, FC.inWi, FC.inHe, setBut);

		sep = new Separator(Orientation.VERTICAL);
		VC.setAn(FC.movSep, FC.inWi, FC.inHe, sep);

		movErrP = VC.getNewAnP(FC.movErrPAn, FC.inWi, FC.inHe);

		movClErrP = VC.getNewImBut(controller.clErrI, FC.movErrClAn, movErrP.getWidth(), movErrP.getHeight(), fewLineHa);
		movClErrP.setBackground(null);

		Triple movT = new Triple(movErrP.getWidth(), movErrP.getHeight(), FC.errDiv);

		movEncNoMPLa = VC.getNewLa(names.movEncNoMErrMsg, FC.movErrLaAn, movT);
		movDecNoMPLa = VC.getNewLa(names.movDecNoMErrMsg, FC.movErrLaAn, movT);
		movDecNoPwsLa = VC.getNewLa(names.movDecNoPwsMsg, FC.movErrLaAn, movT);
		errorI = VC.getNewImLa(controller.colInfoI, FC.movErrIAn, FC.inWi, FC.inHe);

		menuOp.getChildren().addAll(clMenu, encBut, decBut, newMPwdBut, setBut, sep, movErrP);

		/**
		 * Encrypt View.
		 */
		encV = VC.getNewAnP(FC.empty, 0.0, 0.0);

		encBaBut = VC.getNewImBut(controller.encBaI, FC.back, FC.inWi, FC.inHe, fewLineHa);

		encSc = VC.getNewScP(FC.encScAn, FC.inWi, FC.inHe);
		encCon = new VBox();
		encSc.setContent(encCon);
		encSc.vvalueProperty().bind(encCon.heightProperty());

		encPwds = new ArrayList<PasswordField[]>();
		encPwdTs = new ArrayList<TextField[]>();
		encT = new ArrayList<TextField[]>();
		encBs = new ArrayList<AnchorPane>();
		addNewPwdBl(FC.inWi, FC.inHe);

		VC.setDisSt(true, new Node[] {encPwdTs.get(0)[0], encPwdTs.get(0)[1]});
		VC.setVis(false, new Node[] {encPwdTs.get(0)[0], encPwdTs.get(0)[1]});

		encSPwds = VC.getNewCB(names.newMPBoxN, mainFrac, FC.encBoxAn, FC.inWi, FC.inHe);

		encSPwds.selectedProperty().addListener(new ChangeListener<Boolean>() {
			@Override
			public void changed(ObservableValue<? extends Boolean> observable, Boolean oldVal, Boolean newVal) {
				for(int j = 0; j < encPwds.size(); j++) {
					if(newVal) {
						encPwdTs.get(j)[0].setText(encPwds.get(j)[0].getText());
						encPwdTs.get(j)[1].setText(encPwds.get(j)[1].getText());
						VC.setNodesUnusable(new Node [] {encPwds.get(j)[0], encPwds.get(j)[1]});
						VC.setNodesUsable(new Node[] {encPwdTs.get(j)[0], encPwdTs.get(j)[1]});
						if(encMPwd.isVisible()) {
							encMPwdT.setText(encMPwd.getText());
							VC.setNodesUnusable(new Node[] {encMPwd});
							VC.setNodesUsable(new Node[] {encMPwdT});
						}
					} else {
						encPwds.get(j)[0].setText(encPwdTs.get(j)[0].getText());
						encPwds.get(j)[1].setText(encPwdTs.get(j)[1].getText());
						VC.setNodesUsable(new Node[] {encPwds.get(j)[0], encPwds.get(j)[1]});
						VC.setNodesUnusable(new Node[] {encPwdTs.get(j)[0], encPwdTs.get(j)[1]});
						if(encMPwdT.isVisible()) {
							encMPwd.setText(encMPwdT.getText());
							VC.setNodesUnusable(new Node[] {encMPwdT});
							VC.setNodesUsable(new Node[] {encMPwd});
						}
					}
				}
			}
		});

		pmP = new AnchorPane();
		pmP.setPrefSize(FC.pmWi * FC.inWi, FC.pmHe * FC.inHe);

		pBut = VC.getNewImBut(controller.newPI, FC.pAn, FC.inWi, FC.inHe, oneLineHa);
		mBut = VC.getNewImBut(controller.newMI, FC.mAn, FC.inWi, FC.inHe, fewLineHa);

		saveBut = VC.getNewImBut(controller.encSI, FC.saButAn, FC.inWi, FC.inHe, encSaButHa);
		saveBut.setBackground(null);

		encAg = VC.getNewBut(names.encAgN, FC.agButAn, FC.inMT, true, encAgHa);
		encDo = VC.getNewBut(names.encDoN, FC.doButAn, FC.inMT, true, encDoHa);

		encMsgP = VC.getNewAnP(FC.encMsgAn, FC.inWi, FC.inHe);
		encOvP = VC.getNewAnP(FC.encOvAn, FC.inWi, FC.inHe);

		encErrI = VC.getNewImLa(controller.encErrI, FC.encErrAn, encMsgP.getWidth(), encMsgP.getHeight());
		encDoI = VC.getNewImLa(controller.encDoI, FC.encErrAn, encMsgP.getWidth(), encMsgP.getHeight());
		encClI = VC.getNewImBut(controller.encClI, FC.encClAn, encMsgP.getWidth(), encMsgP.getHeight(), oneLineHa);
		encClI.setBackground(null);

		Triple encT = new Triple(encMsgP.getWidth(), encMsgP.getHeight(), FC.butDiv);
		Triple eoT = new Triple(encOvP.getWidth(), encOvP.getHeight(), FC.butDiv);

		encDoLa = VC.getNewLa(names.encLabDo, FC.encLaAn, encT);
		encWrMP = VC.getNewLa(names.encLabWMP, FC.encLaAn, encT);
		encMuErr = VC.getNewLa(names.encLabMErr, FC.encLaAn, encT);
		encExistErr = VC.getNewLa(names.encLabExErr, FC.encOvLaAn, eoT);
		encNoEntry = VC.getNewLa(names.encNoEnt, FC.encLaAn, encT);
		encDiPws = VC.getNewLa(names.encDiffP, FC.encLaAn, encT);
		encMissErr = VC.getNewLa(names.encMissErr, FC.encLaAn, encT);

		encOvNoMP = VC.getNewLa(names.encOvMiss, FC.encOvLaAn, eoT);
		encOvWrMP = VC.getNewLa(names.encOvWMP, FC.encOvLaAn, eoT);

		encDisBut = VC.getNewBut(names.encDisN, FC.encDisAn, FC.inMT, true, encDisHa);
		encChBut = VC.getNewBut(names.encChN, FC.encChAn, FC.inMT, true, encChHa);
		encOKBut = VC.getNewBut(names.encOKN, FC.encOKAn, FC.inMT, 
				true, encOvHa);

		encMPwd = VC.getNewPwdField(names.encPwdField, FC.encMPwd, FC.inMT);
		encMPwdT = VC.getNewTField(names.encPwdField, FC.encMPwd, FC.inMT);

		encOvClBut = VC.getNewImBut(controller.encOvClI, FC.encOvClAn, encOvP.getWidth(), encOvP.getHeight(), oneLineHa);
		encOvClBut.setBackground(null);

		encOvQuest = VC.getNewImLa(controller.encOvQuI, FC.encOvQuAn, encOvP.getWidth(), encOvP.getHeight());

		encV.getChildren().addAll(encBaBut, encSc, encSPwds, pBut, mBut, saveBut, 
				encMsgP, encAg, encDo, encDisBut, encChBut, encOKBut, encMPwd, encMPwdT, encOvP);
		VC.setNodesUnusable(new Node [] {encAg, encDo, encDisBut, encChBut, encOKBut, encMPwd, encMPwdT});		


		/**
		 * Decrypt View.
		 */
		decV = VC.getNewAnP(FC.empty, FC.inWi, FC.inHe);

		decBaBut = VC.getNewImBut(controller.decBaI, FC.back, FC.inWi, FC.inHe, fewLineHa);


		decDelBut = VC.getNewImBut(controller.newDelI, FC.decDelAn, FC.inWi, FC.inHe, decDCSHa);
		decDelBut.setDisable(true);

		decChBut = VC.getNewBut(names.decChN, FC.decChAn, FC.inMT, true, decDCSHa);
		decChBut.setDisable(true);

		decShBut = VC.getNewBut(names.decSN, FC.decShAn, FC.inMT, true, decDCSHa);
		decShBut.setDisable(true);

		decSc = VC.getNewScP(FC.decScAn, FC.inWi, FC.inHe);
		decCon = new GridPane();
		decSc.setContent(decCon);
		decSc.vvalueProperty().bind(decCon.heightProperty());

		setDecBut();

		decPwd = VC.getNewPwdField(names.decPwdN, FC.decPwdAn, FC.inMT);
		decPwdT = VC.getNewTField(names.decPwdN, FC.decPwdAn, FC.inMT);

		decOKBut = VC.getNewBut(names.decOKN, FC.decOKAn, FC.inMT, true, decOKHa);

		decCaBut = VC.getNewBut(names.decCaN, FC.decCaAn, FC.inMT, true, decCaHa);

		decSPwd = VC.getNewCB(names.decPwdBox, mainFrac, FC.decBoxAn, FC.inWi, FC.inHe);
		decSPwd.selectedProperty().addListener(new ChangeListener<Boolean>() {
			@Override
			public void changed(ObservableValue<? extends Boolean> observable, Boolean oldVal, Boolean newVal) {
				if(newVal) {
					VC.setNodesUsable(new Node[] {decPwdT});
					decPwdT.setText(decPwd.getText());
					VC.setNodesUnusable(new Node[] {decPwd});
				} else {
					VC.setNodesUsable(new Node[] {decPwd});
					decPwd.setText(decPwdT.getText());
					VC.setNodesUnusable(new Node[] {decPwdT});
				}
			}
		});

		decMsgP = VC.getNewAnP(FC.decMsgAn, FC.inWi, FC.inHe);

		decClI = VC.getNewImBut(controller.decClI, FC.decClAn, decMsgP.getWidth(), decMsgP.getHeight(), oneLineHa);
		decClI.setBackground(null);

		decDoLa = VC.getNewImLa(controller.decDoI, FC.decErrAn, decMsgP.getWidth(), decMsgP.getHeight());

		decErrLa = VC.getNewImLa(controller.decErrI, FC.decErrAn, decMsgP.getWidth(), decMsgP.getHeight());

		Triple decT = new Triple(decMsgP.getWidth(), decMsgP.getHeight(), FC.butDiv);
		decNoMP = VC.getNewLa(names.decNoMPN, FC.decLaAn, decT); 
		decWrMP = VC.getNewLa(names.decWrMPN, FC.decLaAn, decT);
		decDel = VC.getNewLa(names.decDelN, FC.decLaAn, decT);
		decSuc = VC.getNewLa(names.decSuc, FC.decLaAn, decT);

		VC.setNodesUnusable(new Node[] {decPwd, decPwdT, decSPwd, decOKBut, decCaBut});


		decV.getChildren().addAll(decBaBut, decMsgP, decDelBut, decChBut, decShBut, decSc, decPwd, decPwdT, decSPwd, decOKBut, decCaBut);		


		/**
		 * New Password View.
		 */
		newMPwdView = VC.getNewAnP(FC.empty, 0.0, 0.0);

		newBaBut = VC.getNewImBut(controller.newBaI, FC.back, FC.inWi,	FC.inHe, newMPwdBaButHa);

		chPwd = new RadioButton(names.raButChN);
		chPwd.setContentDisplay(ContentDisplay.RIGHT);
		chPwd.setFont(VC.getFont(1.08 * mainFrac));

		genPwd = new RadioButton(names.raButGenN);
		genPwd.setContentDisplay(ContentDisplay.RIGHT);
		genPwd.setFont(VC.getFont(1.08 * mainFrac));
		genPwd.selectedProperty().addListener(new ChangeListener<Boolean>() {
			@Override
			public void changed(ObservableValue<? extends Boolean> observable, Boolean oldVal, Boolean newVal) {
				if(newVal) {
					VC.setDisSt(true, new Node[] {newPwd, newPwdT, repNewPwd, repNewPwdT});
				} else {
					VC.setDisSt(false, new Node[] {newPwd, newPwdT, repNewPwd, repNewPwdT});
				}
			}
		});

		howToChNew = new ToggleGroup();
		howToChNew.getToggles().addAll(chPwd, genPwd);
		howToChNew.selectToggle(chPwd);

		togVBox = new VBox();
		togVBox.getChildren().add(chPwd);
		togVBox.getChildren().add(genPwd);	
		togVBox.setSpacing(FC.vbspac * FC.inHe);
		VC.setAn(FC.vboxAn, FC.inWi, FC.inHe, togVBox);

		newPwd = VC.getNewPwdField(names.newMPnewPwd, FC.newPwdAn, FC.inMT);
		newPwdT = VC.getNewTField(names.newMPnewPwd, FC.newPwdAn, FC.inMT);
		repNewPwd = VC.getNewPwdField(names.newMPrepNewPwd, FC.repNewPwdAn, FC.inMT);
		repNewPwdT = VC.getNewTField(names.newMPrepNewPwd, FC.repNewPwdAn, FC.inMT);
		oldPwd = VC.getNewPwdField(names.newMPoldPwd, FC.oldPwdAn, FC.inMT);
		oldPwdT = VC.getNewTField(names.newMPoldPwd, FC.oldPwdAn, FC.inMT);

		newPwdValBut = VC.getNewBut(names.newMPValN, FC.newPwdValAn, FC.inMT, true, valNewPwdButHa);
		newMPDoBut = VC.getNewBut(names.newMPDoN, FC.newPwdDoAn, FC.inMT, true, oneLineHa);
		newMPAgBut = VC.getNewBut(names.newMPAgN, FC.newPwdAgAn, FC.inMT, true, fewLineHa);

		VC.setDisSt(true, new Node[] {newMPDoBut, newMPAgBut});
		VC.setVis(false, new Node[] {newMPDoBut, newMPAgBut});

		newPwdS = VC.getNewCB(names.newMPBoxN, mainFrac, FC.newPwdChBAn, FC.inWi, FC.inHe);
		newPwdS.selectedProperty().addListener(new ChangeListener<Boolean>() {
			@Override
			public void changed(ObservableValue<? extends Boolean> observable, Boolean oldVal, Boolean newVal) {
				if(newVal) {
					newPwdT.setText(newPwd.getText());
					repNewPwdT.setText(repNewPwd.getText());
					oldPwdT.setText(oldPwd.getText());
				} else {
					newPwd.setText(newPwdT.getText());
					repNewPwd.setText(repNewPwdT.getText());
					oldPwd.setText(oldPwdT.getText());
				}
			}
		});

		VC.setPwdTextBindings(newPwd, newPwdT, newPwdS);
		VC.setPwdTextBindings(repNewPwd, repNewPwdT, newPwdS);
		VC.setPwdTextBindings(oldPwd, oldPwdT, newPwdS);

		lockLa = VC.getNewImLa(controller.newLockI, FC.lockLaAn, FC.inWi, FC.inHe);

		newMPwdView.getChildren().addAll(newBaBut, togVBox, newPwdValBut, newMPDoBut, 
				newMPAgBut, newPwdS, newPwd, newPwdT, repNewPwd, repNewPwdT);

		oldPwd.setFocusTraversable(false);
		chPwd.requestFocus();

		if(Controller.getMasterPwdExists()) {
			newMPwdView.getChildren().addAll(oldPwd, oldPwdT, lockLa);
		}

		newErrP = VC.getNewAnP(FC.newPwdErrAn, FC.inWi, FC.inHe);
		newMPwdView.getChildren().add(newErrP);

		clNewErrP = VC.getNewImBut(controller.newMPClI, FC.newPwdClAn, newErrP.getWidth(), newErrP.getHeight(), oneLineHa);
		clNewErrP.setBackground(null);

		newMPDiPwds = VC.getNewLa(names.newMPDiffPwdsN, FC.newPwdLaAn, FC.inMT);
		newMPWrMP = VC.getNewLa(names.newMPWrMPN, FC.newPwdLaAn, FC.inMT);
		newMPNoF = VC.getNewLa(names.newMPNoFN, FC.newPwdLaAn, FC.inMT);
		newMPNoS = VC.getNewLa(names.newMPNoSN, FC.newPwdLaAn, FC.inMT);
		newMPNoOld = VC.getNewLa(names.newMPNoOldN, FC.newPwdLaAn, FC.inMT);
		newMPSa = VC.getNewLa(names.newMPSN, FC.newPwdLaAn, FC.inMT);
		newMPTooShort = VC.getNewLa(names.newMPTShN, FC.newPwdLaAn, FC.inMT);

		newMPErrI = VC.getNewImLa(controller.newMPErrI, FC.newPwdErrIAn, newErrP.getWidth(), newErrP.getHeight());
		newMPSaI = VC.getNewImLa(controller.newMPDoI, FC.newPwdErrIAn, newErrP.getWidth(), newErrP.getHeight());
------------------

	private void setKeys() {

		fireOnOpV = e -> {
			if(menuOpVSel) {

				if(names.menuKey.equals(e.getCode())) {
					clMenu.fire();
				} else if(names.encKey.equals(e.getCode())) {
					encBut.fire();
				} else if(names.decKey.equals(e.getCode())) {
					decBut.fire();
				} else if(names.newMPwdKey.equals(e.getCode())) {
					newMPwdBut.fire();
				} else if(setBut.isShowing()) {
					if(names.setKey.equals(e.getCode())) {
						setBut.hide();
					} 					
				} else {
					if(names.setKey.equals(e.getCode())) {
						setBut.show();
					} else if(names.menuKey.equals(e.getCode())) {
						clMenu.fire();
					}
				}			
			} else if(menuClVSel) {
				if(names.menuKey.equals(e.getCode())) {
					opMenu.fire();
				}
			} else if(encVSel) {
				if(names.baKey.equals(e.getCode())) {
					encBaBut.fire();
				} else if(names.encSPwdKey.equals(e.getCode())) {
					if(encSPwds.isSelected()) {
						encSPwds.setSelected(false);
					} else {
						encSPwds.setSelected(true);
					}
				} else if(names.encSKey.equals(e.getCode())) {
					saveBut.fire();
				} else if(names.encOvKey.equals(e.getCode())) {
					encOKBut.fire();
				} else if(names.encDisKey.equals(e.getCode())) {
					encDisBut.fire();
				} else if(names.encChKey.equals(e.getCode())) {
					encChBut.fire();
				} else if(names.encAgKey.equals(e.getCode())) {
					encAg.fire();
				} else if(names.encFinishKey.equals(e.getCode())) {
					encDo.fire();
				} else if(names.encPKey.equals(e.getCode())) {
					pBut.fire();
				} else if(names.encMKey.equals(e.getCode())) {
					mBut.fire();
				}
			} else if(decVSel) {
				if(decDelSel || decShSel || decChSel) {
					if(names.decCaKey.equals(e.getCode())) {
						decCaBut.fire();
					} else if(names.decOKKey.equals(e.getCode())) {
						decOKBut.fire();
					} else if(names.decSPwdKey.equals(e.getCode())) {
						if(decSPwd.isSelected()) {
							decSPwd.setSelected(false);
						} else {
							decSPwd.setSelected(true);
						}
					} else if(names.confirmExitEntKey.equals(e.getCode())) {
						if(decPwd.isFocused() || decPwdT.isFocused()) {
							decOKBut.fire();
							if(decPwd.isVisible()) {
								decPwd.requestFocus();
							} else {
								decPwdT.requestFocus();
							}
						}
					}
				} else {
					if(names.baKey.equals(e.getCode())) {
						decBaBut.fire();
					} else if(names.decChKey.equals(e.getCode())) {
						decChBut.fire();
					} else if(names.decSKey.equals(e.getCode())) {
						decShBut.fire();
					} else if(names.decDelKey.equals(e.getCode())) {
						decDelBut.fire();
					}
				}
			} else if(newMPwdVSel) {
				if(names.baKey.equals(e.getCode())) {
					newBaBut.fire();
				} else if(names.newMPChKey.equals(e.getCode())) {
					chPwd.setSelected(true);
				} else if(names.newMPGenKey.equals(e.getCode())) {
					genPwd.setSelected(true);
				} else if(names.newMPSKey.equals(e.getCode())) {
					if(newPwdS.isSelected()) {
						newPwdS.setSelected(false);
					} else {
						newPwdS.setSelected(true);
					}
				} else if(names.newMPNextKey.equals(e.getCode())) {
					newPwdValBut.fire();
				} else if(names.newMPAgKey.equals(e.getCode())) {
					newMPAgBut.fire();
				} else if(names.newMPDoKey.equals(e.getCode())) {
					newMPDoBut.fire();
				} else if(names.confirmExitEntKey.equals(e.getCode())) {
					if(oldPwd.isFocused() || oldPwdT.isFocused()) {
						newPwdValBut.fire();
					}
				}
			}
		};
		stage.addEventHandler(KeyEvent.KEY_PRESSED, fireOnOpV);		

		fireOnEsc = esc -> {
			if(names.exitKey.equals(esc.getCode())) {
				stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST));
			}
		};
		stage.addEventHandler(KeyEvent.KEY_PRESSED, fireOnEsc);

	}
---------------------
	private EventHandler<ActionEvent> decPwdButHa = decSelectButtonEvent -> {

		int index = -1;
		for(int j = 0; j < decPwds.size(); j++) {
			if(decPwds.get(j).equals(decSelectButtonEvent.getSource())) {
				index = j;
				break;
			}
		}

		if(decSel.get(index)) {
			decSel.set(index, false);
			decButSel--;
			decPwds.get(index).setBorder(new Button().getBorder());
		} else {
			decSel.set(index, true);
			decButSel++;
			decPwds.get(index).setBorder(FC.decButSelBord);
		}

		if(decButSel == 0) {
			VC.setDisSt(true, new Node[] {decShBut, decChBut, decDelBut});
		} else {
			VC.setDisSt(false, new Node[] {decShBut, decChBut, decDelBut});
		}
	};
----------------
	private void reComp() {

		stage.setTitle(names.frameTitle);

		encBut.setText(names.encButN);
		decBut.setText(names.decButN);
		newMPwdBut.setText(names.newMPwdButN);
		setBut.setText(names.setButN);
		movEncNoMPLa.setText(names.movEncNoMErrMsg);
		movDecNoMPLa.setText(names.movDecNoMErrMsg);
		movDecNoPwsLa.setText(names.movDecNoPwsMsg);
		userManTitle.setText(names.usMTit);
		webEngine.loadContent(names.usMCon);
		germanItem.setText(names.gerItN);
		englishItem.setText(names.engItN);
		menuLanguage.setText(names.lanItN);
		menuHelp.setText(names.helpItemN);

		for(int j = 0; j < encPwds.size(); j++) {
			encPwds.get(j)[0].setPromptText(names.encPwdN);
			encPwds.get(j)[1].setPromptText(names.encRepPwdN);
			encPwdTs.get(j)[0].setPromptText(names.encPwdN);
			encPwdTs.get(j)[1].setPromptText(names.encRepPwdN);
			encT.get(j)[0].setPromptText(names.encNN);
			encT.get(j)[1].setPromptText(names.encUNN);
			encT.get(j)[2].setPromptText(names.encComN);
		}

		encSPwds.setText(names.newMPBoxN);
		encAg.setText(names.encAgN);
		encDo.setText(names.encDoN);
		encDoLa.setText(names.encLabDo);
		encWrMP.setText(names.encLabWMP);
		encMuErr.setText(names.encLabMErr);
		encExistErr.setText(names.encLabExErr);
		encNoEntry.setText(names.encNoEnt);
		encDiPws.setText(names.encDiffP);
		encMissErr.setText(names.encMissErr);
		encOvNoMP.setText(names.encOvMiss);
		encOvWrMP.setText(names.encOvWMP);
		encDisBut.setText(names.encDisN);
		encChBut.setText(names.encChN);
		encOKBut.setText(names.encOKN);
		encMPwd.setPromptText(names.encPwdField);
		encMPwdT.setPromptText(names.encPwdField);		

		decChBut.setText(names.decChN);
		decShBut.setText(names.decSN);
		decPwd.setPromptText(names.decPwdN);
		decPwdT.setPromptText(names.decPwdN);
		decOKBut.setText(names.decOKN);
		decCaBut.setText(names.decCaN);
		decSPwd.setText(names.decPwdBox);
		decNoMP.setText(names.decNoMPN);
		decWrMP.setText(names.decWrMPN);
		decDel.setText(names.decDelN);
		decSuc.setText(names.decSuc);
			
		newPwd.setPromptText(names.newMPnewPwd);
		newPwdT.setPromptText(names.newMPnewPwd);
		repNewPwd.setPromptText(names.newMPrepNewPwd);
		repNewPwdT.setPromptText(names.newMPrepNewPwd);
		oldPwd.setPromptText(names.newMPoldPwd);
		oldPwdT.setPromptText(names.newMPoldPwd);
		newPwdS.setText(names.newMPBoxN);
		newPwdValBut.setText(names.newMPValN);
		newMPDoBut.setText(names.newMPDoN);
		newMPAgBut.setText(names.newMPAgN);
		chPwd.setText(names.raButChN);
		genPwd.setText(names.raButGenN);
		newMPDiPwds.setText(names.newMPDiffPwdsN);
		newMPWrMP.setText(names.newMPWrMPN);
		newMPNoF.setText(names.newMPNoFN);
		newMPNoS.setText(names.newMPNoSN);
		newMPNoOld.setText(names.newMPNoOldN);
		newMPSa.setText(names.newMPSN);
		newMPTooShort.setText(names.newMPTShN);

		stage.removeEventHandler(KeyEvent.KEY_PRESSED, fireOnEsc);
		stage.removeEventHandler(KeyEvent.KEY_PRESSED, fireOnOpV);

		setKeys();
	}
-------------
	private EventHandler<ActionEvent> fewLineHa = fewLineEvent -> {
		if(fewLineEvent.getSource().equals(newMPAgBut)) {
			VC.setDisSt(false, new Node[] {newPwd, newPwdT, repNewPwd, repNewPwdT, 
					oldPwd, oldPwdT, chPwd, genPwd, newPwdS, lockLa, newPwdValBut});
			VC.setDisSt(true, new Node[] {newMPDoBut, newMPAgBut});
			VC.setVis(false, new Node[] {newMPDoBut, newMPAgBut});
			VC.setVis(true, new Node[] {newPwdValBut});
			clNewErrP.fire();
		} else if(fewLineEvent.getSource().equals(clUserMan)) {
			if(userManOp) {
				VC.clearPane(userMan);
				userManOp = false;
			}
		} else if(fewLineEvent.getSource().equals(englishItem)) {
			if(!names.language.equals(Language.ENGLISH)) {
				names = new Names(Language.ENGLISH);
				reComp();
			}
		} else if(fewLineEvent.getSource().equals(germanItem)) {
			if(!names.language.equals(Language.GERMAN)) {
				names = new Names(Language.GERMAN);
				reComp();
			}
		} else if(fewLineEvent.getSource().equals(movClErrP)) {
			if(menuOpVSel) {
				VC.clearPane(movErrP);
				encErrOcc = false;
				decErrOccNoMP = false;
				decErrOccNoPw = false;
			}
		} else if(fewLineEvent.getSource().equals(encBaBut)) {
			encVSel = false;
			menuOpVSel = true;
			encAg.setDisable(false);
			encAg.fire();
			encAg.setDisable(true);
			mainFrame.getChildren().clear();
			mainFrame.getChildren().add(menuOp);
		} else if(fewLineEvent.getSource().equals(decBaBut)) {
			decVSel = false;
			menuOpVSel = true;
			mainFrame.getChildren().clear();
			mainFrame.getChildren().add(menuOp);
		} else if(fewLineEvent.getSource().equals(mBut)) {
			if(encPwds.size() > 1) {
				encBs.get(encBs.size()-1).getChildren().clear();
				encCon.getChildren().remove(encBs.get(encBs.size()-1));
				encPwds.remove(encPwds.size()-1);
				encPwdTs.remove(encPwdTs.size()-1);
				encT.remove(encT.size()-1);
				encBs.remove(encBs.size()-1);
			}
		} else if(fewLineEvent.getSource().equals(menuHelp)) {
			if(encErrOcc || decErrOccNoMP || decErrOccNoPw) {
				VC.clearPane(movErrP);
				encErrOcc = false;
				decErrOccNoMP = false;
				decErrOccNoPw = false;
			}
			if(!userManOp) {
				userMan.getChildren().addAll(userManTitle, clUserMan, userManCon, manI);
				userMan.setBorder(FC.usManBord);
				userManOp = true;
			}
		} else if(fewLineEvent.getSource().equals(newMPwdBut)) {
			encErrOcc = false;
			decErrOccNoMP = false;
			decErrOccNoPw = false;
			movClErrP.fire();
			clUserMan.fire();
			menuOpVSel = false;
			newMPwdVSel = true;
			mainFrame.getChildren().clear();
			mainFrame.getChildren().add(newMPwdView);
		} else if(fewLineEvent.getSource().equals(clMenu)) {
			encErrOcc = false;
			decErrOccNoMP = false;
			decErrOccNoPw = false;
			movClErrP.fire();
			clUserMan.fire();
			menuClVSel = true;
			menuOpVSel = false;
			mainFrame.getChildren().clear();	
			mainFrame.getChildren().add(menuCl);
		} else if(fewLineEvent.getSource().equals(opMenu)) {
			menuClVSel = false;
			menuOpVSel = true;
			mainFrame.getChildren().clear();
			mainFrame.getChildren().add(menuOp);
		}
		resizeComponents();
	};
-----------
	private EventHandler<ActionEvent> encOvHa = encOverwriteEvent -> {
		String inp = "";
		if(encSPwds.isSelected()) {
			inp = encMPwdT.getText();
		} else {
			inp = encMPwd.getText();
		}

		if(Controller.checkUserInputMPwd(inp)) {
			VC.clearPane(encOvP);

			encMsgP.getChildren().addAll(encDoI, encClI, encDoLa);
			VC.decoratePane(encMsgP, FC.newMPDoBord, FC.newMPDoBa);
			encT.get(0)[0].setBackground(FC.empBa);

			VC.setNodesUnusable(new Node[] {encDisBut, encOKBut, encChBut, encMPwd, encMPwdT});
			VC.setNodesUsable(new Node[] {encAg, encDo});

			VC.resetFields(new TextField[] {encMPwd, encMPwdT});
			ArrayList<String[]> toStore = new ArrayList<String[]>();
			for(int j = 0; j < encPwds.size(); j++) {
				
				String[] toAdd = new String[4];
				toAdd[0] = encT.get(j)[0].getText();
				toAdd[1] = encT.get(j)[1].getText();
				toAdd[2] = encT.get(j)[2].getText();
				if(encSPwds.isSelected()) {
					toAdd[3] = encPwdTs.get(j)[0].getText();
				} else {
					toAdd[3] = encPwds.get(j)[0].getText();
				}
				toStore.add(toAdd);
				
				VC.setDisSt(true, new Node[] {encPwds.get(j)[0], encPwds.get(j)[1], encPwdTs.get(j)[0],
						encPwdTs.get(j)[1], encT.get(j)[0], encT.get(j)[1], encT.get(j)[2], encSPwds, saveBut, pBut, mBut});
			}		
			resizeComponents();
			
			Controller.storeAndOverwrite(toStore);
			
		} else {
			VC.decoratePane(encOvP, FC.newMPErrBord, FC.newMPErrBa);
			encOvP.getChildren().clear();
			encOvP.getChildren().addAll(encOvClBut, encOvQuest);

			if(inp.equals("")) {
				encOvP.getChildren().add(encOvNoMP);
			} else {
				encOvP.getChildren().add(encOvWrMP);
				VC.resetFields(new TextField[] {encMPwd, encMPwdT});
			}
		} 
	};

---------------
	private EventHandler<ActionEvent> encAgHa = encAgEvent -> {
		VC.setDisSt(false, new Node[] {encPwds.get(0)[0], encPwds.get(0)[1], encPwdTs.get(0)[0],
				encPwdTs.get(0)[1], encT.get(0)[0], encT.get(0)[1], encT.get(0)[2], encSPwds, saveBut, pBut, mBut, encBaBut});
		encClI.fire();
		while(encPwds.size() > 1) {
			mBut.fire();
		}	
		VC.resetFields(new TextField[] {encPwds.get(0)[0], encPwds.get(0)[1], encPwdTs.get(0)[0],
				encPwdTs.get(0)[1], encT.get(0)[0], encT.get(0)[1], encT.get(0)[2]});
		VC.setNodesUnusable(new Node[] {encAg, encDo});
		encSPwds.setSelected(false);
	};
-----------------
	private EventHandler<ActionEvent> encDoHa = encDoEvent -> {
		encAg.fire();
		encBaBut.fire();
		encSPwds.setSelected(false);
	};
-----------------
	private EventHandler<ActionEvent> oneLineHa = oneLineEvent -> {
		if(oneLineEvent.getSource().equals(decClI)) {
			VC.clearPane(decMsgP);
		} else if(oneLineEvent.getSource().equals(clNewErrP)) {
			if(newMPwdVSel) {
				VC.clearPane(newErrP);
			}
		} else if(oneLineEvent.getSource().equals(encOvClBut)) {
			VC.clearPane(encOvP);
		} else if(oneLineEvent.getSource().equals(encClI)) {
			VC.clearPane(encMsgP);
		} else if(oneLineEvent.getSource().equals(newMPDoBut)) {
			newBaBut.fire();
		} else if(oneLineEvent.getSource().equals(pBut)) {
			addNewPwdBl(scene.getWidth(), scene.getHeight());
		}
	};	
-----------------
	private EventHandler<ActionEvent> decOKHa = decOKEvent -> {

		VC.clearPane(decMsgP);

		String userInp;
		if(decSPwd.isSelected()) {
			userInp = decPwdT.getText();
		} else {
			userInp = decPwd.getText();
		}

		if(userInp.equals("")) {
			decMsgP.getChildren().addAll(decClI, decErrLa, decNoMP);
			VC.decoratePane(decMsgP, FC.newMPErrBord, FC.newMPErrBa);
			resizeComponents();
			return;
		}

		if(!Controller.checkUserInputMPwd(userInp)) {
			decMsgP.getChildren().addAll(decClI, decErrLa, decWrMP);
			VC.decoratePane(decMsgP, FC.newMPErrBord, FC.newMPErrBa);
			resizeComponents();
			decPwd.setText("");
			decPwdT.setText("");
			return;
		}

		if(decDelSel) {
			ArrayList<Integer> toDelete = new ArrayList<Integer>();
			for(int j = 0; j < decSel.size(); j++) {
				if(decSel.get(j)) {
					toDelete.add(j);
				}
			}
			Controller.deleteListEntries(toDelete);

			setDecBut();
			decCaBut.fire();

			decMsgP.getChildren().addAll(decClI, decDoLa, decDel);
			VC.decoratePane(decMsgP, FC.newMPDoBord, FC.newMPDoBa);

			decDelSel = false;
			
			VC.setDisSt(true, new Node[] {decChBut, decShBut, decDelBut});
		} else if(decChSel) {
			chShMethod();
		} else if(decShSel) {
			chShMethod();
		}
	};
-------------
	private EventHandler<ActionEvent> encSaButHa = newSaveEvent -> {

		encClI.fire();

		for(int j = 0; j < encPwds.size(); j++) {
			VC.setBack(FC.empBa, new TextField[] {encPwds.get(j)[0], encPwds.get(j)[1], 
					encPwdTs.get(j)[0], encPwdTs.get(j)[1], encT.get(j)[0]});
		}

		boolean missing = false;
		ArrayList<Integer> toCheck = new ArrayList<Integer>();

		for(int j = 0; j < encPwds.size(); j++) {
			if(encPwds.get(j)[0].getText().equals("") && encPwds.get(j)[1].getText().equals("")
					&& encPwdTs.get(j)[0].getText().equals("") && encPwdTs.get(j)[1].getText().equals("")
					&& encT.get(j)[0].getText().equals("") && encT.get(j)[1].getText().equals("") 
					&& encT.get(j)[2].getText().equals("")) {
				continue;
			}	
			toCheck.add(j);

			String first = encT.get(j)[0].getText();
			String second = "";
			String third = "";
			if(encSPwds.isSelected()) {
				second = encPwdTs.get(j)[0].getText();
				third = encPwdTs.get(j)[1].getText();
			} else {
				second = encPwds.get(j)[0].getText();
				third = encPwds.get(j)[1].getText();
			}

			if(first.equals("")) {
				encT.get(j)[0].setBackground(FC.errMsgBa);
				missing = true;
			}
			if(second.equals("")) {
				VC.setBack(FC.errMsgBa, new TextField[] {encPwdTs.get(j)[0], encPwds.get(j)[0]});
				missing = true;
			}
			if(third.equals("")) {
				VC.setBack(FC.errMsgBa, new TextField[] {encPwdTs.get(j)[1], encPwds.get(j)[1]});
				missing = true;
			}
		}

		if(missing) {
			encMsgP.getChildren().addAll(encErrI, encClI, encMissErr);
			VC.decoratePane(encMsgP, FC.errMsgBord, FC.errMsgBa);
			resizeComponents();
			return;
		}

		boolean hasDuplicates = false;
		for(int j = 0; j < toCheck.size(); j++) {
			for(int k = 0; k < toCheck.size(); k++) {
				if(k == j) {
					continue;
				}
				if(encT.get(toCheck.get(j))[0].getText().equals(encT.get(toCheck.get(k))[0].getText())) {
					hasDuplicates = true;
					VC.setBack(FC.errMsgBa, new TextField[] {encT.get(toCheck.get(j))[0], encT.get(toCheck.get(k))[0]});
				}
			}
		}
	
		if(hasDuplicates) {
			encMsgP.getChildren().addAll(encErrI, encClI, encMuErr);
			VC.decoratePane(encMsgP, FC.errMsgBord, FC.errMsgBa);
			resizeComponents();
			return;
		}

		boolean differentPwds = false;
		for(int j = 0; j < encPwds.size(); j++) {
			if(toCheck.size() == 0) {
				continue;
			}
			String first = "";
			String second = "";
			if(encSPwds.isSelected()) {
				first = encPwdTs.get(j)[0].getText();
				second = encPwdTs.get(j)[1].getText();
			} else {
				first = encPwds.get(j)[0].getText();
				second = encPwds.get(j)[1].getText();
			}

			if(!first.equals(second)) {
				differentPwds = true;
				VC.setBack(FC.errMsgBa, new TextField[] {encPwdTs.get(j)[0], encPwdTs.get(j)[1], encPwds.get(j)[0], encPwds.get(j)[1]});
			}
		}

		if(differentPwds) {
			encMsgP.getChildren().addAll(encErrI, encClI, encDiPws);
			VC.decoratePane(encMsgP, FC.errMsgBord, FC.errMsgBa);
			resizeComponents();
			return;
		}

		if(toCheck.size() == 0) {
			encMsgP.getChildren().addAll(encErrI, encClI, encNoEntry);
			VC.decoratePane(encMsgP, FC.errMsgBord, FC.errMsgBa);
			resizeComponents();
			return;
		}

		boolean alreadyExists = false;
		for(int j = 0; j < toCheck.size(); j++) {
			boolean temp = Controller.checkForPwdDuplicates(encT.get(toCheck.get(j))[0].getText());
			if(temp) {
				alreadyExists = true;
				encT.get(toCheck.get(j))[0].setBackground(FC.errMsgBa);
			}
		}
		if(alreadyExists) {
			encOvP.getChildren().addAll(encOvClBut, encOvQuest, encExistErr);
			VC.decoratePane(encOvP, FC.errMsgBord, FC.errMsgBa);
			resizeComponents();

			VC.setNodesUsable(new Node[] {encDisBut, encChBut, encOKBut});

			if(encSPwds.isSelected()) {
				VC.setNodesUsable(new Node[] {encMPwdT});
			} else {
				VC.setNodesUsable(new Node[] {encMPwd});
			}

			for(int j = 0; j < encPwds.size(); j++) {
				VC.setDisSt(true, new Node[] {encPwds.get(j)[0], encPwds.get(j)[1], encPwdTs.get(j)[0],
						encPwdTs.get(j)[1], encT.get(j)[0], encT.get(j)[1], encT.get(j)[2],
						encSPwds, saveBut, pBut, mBut, encBaBut});
			}	
			return;
		}

		for(int j = 0; j < toCheck.size(); j++) {
			String name = encT.get(toCheck.get(j))[0].getText();
			String uname = encT.get(toCheck.get(j))[1].getText();
			String comment = encT.get(toCheck.get(j))[2].getText();
			String p = "";
			if(encSPwds.isSelected()) {
				p = encPwdTs.get(toCheck.get(j))[0].getText();
			} else {
				p = encPwds.get(toCheck.get(j))[0].getText();
			}
			Controller.appendNewEntry(name, uname, comment, p);
		}

		encMsgP.getChildren().addAll(encDoI, encClI, encDoLa);
		VC.decoratePane(encMsgP, FC.newMPDoBord, FC.newMPDoBa);
		VC.setNodesUsable(new Node[] {encAg, encDo});

		for(int j = 0; j < encPwds.size(); j++) {
			VC.setDisSt(true, new Node[] {encPwds.get(j)[0], encPwds.get(j)[1], encPwdTs.get(j)[0],
					encPwdTs.get(j)[1], encT.get(j)[0], encT.get(j)[1], encT.get(j)[2], encSPwds, saveBut, pBut, mBut});
		}	
		resizeComponents();
	};
--------------
	private EventHandler<ActionEvent> decCaHa = decCancelEvent -> {
		VC.clearPane(decMsgP);
		decDelSel = false;
		decShSel = false;
		decChSel = false;
		decSPwd.setSelected(false);
		VC.setNodesUnusable(decPwd, decPwdT, decSPwd, decOKBut, decCaBut);
		VC.setDisSt(false, new Node[] {decShBut, decChBut, decDelBut, decBaBut});
		for(int j = 0; j < decPwds.size(); j++) {
			VC.setDisSt(false, new Node[] {decPwds.get(j)});
		}
		decPwd.setText("");
		decPwdT.setText("");
	};
----------------
	private EventHandler<ActionEvent> decDCSHa = decDCSEvent -> {
		if(!actOnAnyDecBut()) {
			return;
		}
		if(decDCSEvent.getSource().equals(decDelBut)) {
			decDelSel = true;
		} else if(decDCSEvent.getSource().equals(decChBut)) {
			decChSel = true;
		} else if(decDCSEvent.getSource().equals(decShBut)) {
			decShSel = true;
		}
	};
----------------
	private EventHandler<ActionEvent> valNewPwdButHa = newPwdEvent -> {
		boolean temp = Controller.getMasterPwdExists();

		VC.clearPane(newErrP);

		String temporaryOldPwd = "";
		String temporaryNewPwd;
		String temporaryRepNew;
		if(temp) {
			if(newPwdS.isSelected()) {
				temporaryOldPwd = oldPwdT.getText();
			} else {
				temporaryOldPwd = oldPwd.getText();
			}
		}

		if(chPwd.isSelected()) {
			if(newPwdS.isSelected()) {
				temporaryNewPwd = newPwdT.getText();
				temporaryRepNew = repNewPwdT.getText();
			} else {
				temporaryNewPwd = newPwd.getText();
				temporaryRepNew = repNewPwd.getText();
			}

			if(!temporaryNewPwd.equals(temporaryRepNew)) {				
				newErrP.getChildren().addAll(clNewErrP, newMPErrI);
				if(temporaryNewPwd.equals("")) {
					newErrP.getChildren().add(newMPNoF);
				} else if(temporaryRepNew.equals("")) {
					newErrP.getChildren().add(newMPNoS);
				} else {
					newErrP.getChildren().add(newMPDiPwds);
				}
				VC.decoratePane(newErrP, FC.newMPErrBord, FC.newMPErrBa);
				VC.resetFields(new TextField[] {newPwd, newPwdT, repNewPwd, repNewPwdT, oldPwd, oldPwdT});
				resizeComponents();

				newPwdEvent.consume();
				return;
			} 

			if(temporaryNewPwd.length() < FC.minPwdLen) {
				newErrP.getChildren().addAll(clNewErrP, newMPTooShort, newMPErrI);
				VC.decoratePane(newErrP, FC.newMPErrBord, FC.newMPErrBa);
				VC.resetFields(new TextField[] {newPwd, newPwdT, repNewPwd, repNewPwdT, oldPwd, oldPwdT});
				resizeComponents();

				newPwdEvent.consume();
				return;
			}

			if(temp) {
				if(!Controller.checkUserInputMPwd(temporaryOldPwd)) {
					newErrP.getChildren().addAll(clNewErrP, newMPErrI);
					if(temporaryOldPwd.equals("")) {
						newErrP.getChildren().add(newMPNoOld);
					} else {
						newErrP.getChildren().add(newMPWrMP);
					}
					VC.decoratePane(newErrP, FC.newMPErrBord, FC.newMPErrBa);
					VC.resetFields(new TextField[] {newPwd, newPwdT, repNewPwd, repNewPwdT, oldPwd, oldPwdT});
					oldPwd.setText("");
					resizeComponents();

					newPwdEvent.consume();
					return;
				}
			}
			afterSuccessfulPwdVal(temporaryNewPwd, false);			
		} else {
			if(temp) {
				if(!Controller.checkUserInputMPwd(temporaryOldPwd)) {
					newErrP.getChildren().addAll(clNewErrP, newMPErrI);
					if(temporaryOldPwd.equals("")) {
						newErrP.getChildren().add(newMPNoOld);
					} else {
						newErrP.getChildren().add(newMPWrMP);
					}
					VC.decoratePane(newErrP, FC.newMPErrBord, FC.newMPErrBa);
					VC.resetFields(new TextField[] {newPwd, newPwdT, repNewPwd, repNewPwdT, oldPwd, oldPwdT});
					oldPwd.setText("");
					resizeComponents();

					newPwdEvent.consume();
					return;
				} 
			}
			afterSuccessfulPwdVal(Controller.generateMasterPassword(), true);
		}
		if(!temp) {
			newMPwdView.getChildren().addAll(oldPwd, oldPwdT, lockLa);
		}
		resizeComponents();
	};
-----------------
	private EventHandler<ActionEvent> encChHa = encChangeEvent -> {
		encOvClBut.fire();
		VC.decoratePane(encMsgP, null, null);
		VC.setNodesUnusable(new Node[] {encDisBut, encChBut, encOKBut, encMPwd, encMPwdT});

		for(int j = 0; j < encPwds.size(); j++) {
			VC.setDisSt(false, new Node[] {encPwds.get(j)[0], encPwds.get(j)[1], encPwdTs.get(j)[0],
					encPwdTs.get(j)[1], encT.get(j)[0], encT.get(j)[1], encT.get(j)[2], encSPwds, saveBut, pBut, mBut});
		}		
	};
-----------------
	private EventHandler<ActionEvent> encDisHa = encDismissEvent -> {
		encOvClBut.fire();

		VC.setDisSt(false, new Node[] {encPwds.get(0)[0], encPwds.get(0)[1], encPwdTs.get(0)[0], encPwdTs.get(0)[1],
				 encT.get(0)[0], encT.get(0)[1], encT.get(0)[2], encSPwds, saveBut, pBut, mBut, encBaBut});
		VC.resetFields(new TextField[] {encPwds.get(0)[0], encPwds.get(0)[1], encPwdTs.get(0)[0],
				encPwdTs.get(0)[1], encT.get(0)[0], encT.get(0)[1], encT.get(0)[2]});
		VC.setNodesUnusable(new Node[] {encDisBut, encChBut, encOKBut, encMPwd, encMPwdT});

		while(encPwds.size() > 1) {
			mBut.fire();
		}
		encT.get(0)[0].setBackground(FC.empBa);
		encSPwds.setSelected(false);
	};
------------------
	private boolean actOnAnyDecBut() {
		if(decButSel == 0) {
			return false;
		}

		if(decSPwd.isSelected()) {
			VC.setNodesUsable(new Node[] {decSPwd, decPwdT, decOKBut, decCaBut});
		} else {
			VC.setNodesUsable(new Node[] {decSPwd, decPwd, decOKBut, decCaBut});
		}
		VC.setDisSt(true, new Node[] {decShBut, decChBut, decDelBut, decBaBut});
		for(int j = 0; j < decPwds.size(); j++) {
			VC.setDisSt(true, new Node[] {decPwds.get(j)});
		}
		resizeComponents();
		return true;
	}
------------------
	private void addNewPwdBl(double width, double height) {

		AnchorPane ancPaneToAdd = new AnchorPane();
		ancPaneToAdd.setPrefSize(0.5 * width, 0.35 * height);

		Triple temT = new Triple(width, height, FC.butDiv);
		double wi = ancPaneToAdd.getPrefWidth();
		double hi = ancPaneToAdd.getPrefHeight();

		PasswordField[] tPwds = new PasswordField[] {VC.getNewPwdField(names.encPwdN, FC.pwdAn, temT, wi, hi),
				VC.getNewPwdField(names.encRepPwdN, FC.repPwdAn, temT, wi, hi)};
		TextField[] tPwdTexts = new TextField[] {VC.getNewTField(names.encPwdN, FC.pwdTAn, temT, wi, hi),
				VC.getNewTField(names.encRepPwdN, FC.repPwdTAn, temT, wi, hi)};
		TextField[] tTexts = new TextField[] {VC.getNewTField(names.encNN, FC.nAn, temT, wi, hi),
				VC.getNewTField(names.encUNN, FC.unAn, temT, wi, hi), VC.getNewTField(names.encComN, FC.comAn, temT, wi, hi)};

		TextFields.bindAutoCompletion(tTexts[0], logos.getPlatformList());

		encPwds.add(tPwds);
		encPwdTs.add(tPwdTexts);
		encT.add(tTexts);
		encBs.add(ancPaneToAdd);

		if(encPwds.size() > 1) {
			if(encSPwds.isSelected()) {
				VC.setNodesUnusable(tPwds);
			} else {
				VC.setNodesUnusable(tPwdTexts);
			}
		}
		ancPaneToAdd.getChildren().addAll(tTexts[0], tTexts[1], tPwds[0], tPwdTexts[0], tPwds[1], tPwdTexts[1], tTexts[2]);
		encCon.getChildren().add(ancPaneToAdd);
	}
---------------
	private void resizeComponents() {
		double w = scene.getWidth();
		double h = scene.getHeight();
		double frac = (w + h) / FC.butDiv;

		if(menuClVSel) {
			VC.setAn(FC.mcvBut, w, h, opMenu);
		} else if(menuOpVSel) {
			VC.setAn(FC.movCl, w, h, clMenu);
			VC.setAn(FC.movDec, w, h, decBut);
			VC.setAn(FC.movEnc, w, h, encBut);
			VC.setAn(FC.movNew, w, h, newMPwdBut);
			VC.setAn(FC.movSet, w ,h, setBut);
			VC.setAn(FC.movSep, w, h, sep);
			VC.setAn(FC.movErrPAn, w, h, movErrP);
			encBut.setFont(VC.getFont(frac));
			decBut.setFont(VC.getFont(frac));
			newMPwdBut.setFont(VC.getFont(frac));
			setBut.setFont(VC.getFont(frac));
			if(userManOp) {
				VC.setAn(FC.usMAn, w, h, userMan);
				double uw = userMan.getWidth();
				double uh = userMan.getHeight();
				VC.setAn(FC.usMClAn, uw, uh, clUserMan);
				VC.setAn(FC.usMTitAn, uw, uh, userManTitle);
				VC.setAn(FC.usMConAn, uw, uh, userManCon);

				userManTitle.setFont(VC.getTitleFont((uw + uh) / FC.titDiv));
				browser.setFontScale((w + h) / FC.conDiv);
				VC.setAn(FC.usMIAn, uw, uh, manI);
			}
			if(encErrOcc || decErrOccNoMP || decErrOccNoPw) {
				double mw = movErrP.getWidth();
				double mh = movErrP.getHeight();
				double mfrac = (mw + mh) / FC.errDiv;

				if(encErrOcc) {
					VC.setAn(FC.movErrLaAn, mw, mh, movEncNoMPLa);
					movEncNoMPLa.setFont(VC.getFont(mfrac));
				} else if(decErrOccNoMP) {
					VC.setAn(FC.movErrLaAn, mw, mh, movDecNoMPLa);
					movDecNoMPLa.setFont(VC.getFont(mfrac));
				} else if(decErrOccNoPw) {
					VC.setAn(FC.movErrLaAn, mw, mh, movDecNoPwsLa);
					movDecNoPwsLa.setFont(VC.getFont(mfrac));
				}
				VC.setAn(FC.movErrClAn, mw, mh, movClErrP);
				VC.setAn(FC.movErrIAn, mw, mh, errorI);
			} 

		} else if(encVSel) {
			VC.setAn(FC.back, w, h, encBaBut);
			VC.setAn(FC.empty, 0.0, 0.0, encV);
			encSPwds.setFont(VC.getFont((w + h) / FC.butDiv));
			VC.setAn(FC.encBoxAn, w, h, encSPwds);
			pmP.setPrefSize(FC.pmWi * w, FC.pmHe * h);
			VC.setAn(FC.encScAn, w, h, encSc);
			VC.setAn(FC.pAn, w, h, pBut);	
			VC.setAn(FC.mAn, w, h, mBut);
			VC.setAn(FC.back, w, h, encBaBut);

			for(int j = 0; j < encBs.size(); j++) {
				double bw = encBs.get(j).getPrefWidth();
				double bh = encBs.get(j).getPrefHeight();

				encBs.get(j).setPrefSize(FC.encBlWi * w, FC.encBlHe * h);
				encPwds.get(j)[0].setFont(VC.getFont(frac));
				encPwds.get(j)[1].setFont(VC.getFont(frac));
				VC.setAn(FC.pwdAn, bw, bh, encPwds.get(j)[0]);
				VC.setAn(FC.repPwdAn, bw, bh, encPwds.get(j)[1]);
				encPwdTs.get(j)[0].setFont(VC.getFont(frac));
				encPwdTs.get(j)[1].setFont(VC.getFont(frac));
				VC.setAn(FC.pwdAn, bw, bh, encPwdTs.get(j)[0]);
				VC.setAn(FC.repPwdAn, bw, bh, encPwdTs.get(j)[1]);
				encT.get(j)[0].setFont(VC.getFont(frac));
				encT.get(j)[1].setFont(VC.getFont(frac));
				encT.get(j)[2].setFont(VC.getFont(frac));
				VC.setAn(FC.nAn, bw, bh, encT.get(j)[0]);
				VC.setAn(FC.unAn, bw, bh, encT.get(j)[1]);
				VC.setAn(FC.comAn, bw, bh, encT.get(j)[2]);
			}

			VC.setAn(FC.saButAn, w, h, saveBut);
			encAg.setFont(VC.getFont(frac));
			encDo.setFont(VC.getFont(frac));
			VC.setAn(FC.agButAn, w, h, encAg);
			VC.setAn(FC.doButAn, w, h, encDo);

			VC.setAn(FC.encMsgAn, w, h, encMsgP);
			double ew = encMsgP.getWidth();
			double eh = encMsgP.getHeight();

			VC.setAn(FC.encErrAn, ew, eh, encErrI);
			VC.setAn(FC.encErrAn, ew, eh, encDoI);
			VC.setAn(FC.encClAn, ew, eh, encClI);
			VC.setAn(FC.encLaAn, ew, eh, encDoLa);
			encDoLa.setFont(VC.getFont(frac));
			VC.setAn(FC.encLaAn, ew, eh, encWrMP);
			encWrMP.setFont(VC.getFont(frac));
			VC.setAn(FC.encLaAn, ew, eh, encMuErr);
			encMuErr.setFont(VC.getFont(frac));
			VC.setAn(FC.encLaAn, ew, eh, encExistErr);
			encExistErr.setFont(VC.getFont(frac));
			VC.setAn(FC.encLaAn, ew, eh, encNoEntry);
			encNoEntry.setFont(VC.getFont(frac));
			VC.setAn(FC.encLaAn, ew, eh, encDiPws);
			encDiPws.setFont(VC.getFont(frac));
			VC.setAn(FC.encLaAn, ew, eh, encMissErr);
			encMissErr.setFont(VC.getFont(frac));		

			VC.setAn(FC.encDisAn, w, h, encDisBut);
			encDisBut.setFont(VC.getFont(frac));
			VC.setAn(FC.encChAn, w, h, encChBut);
			encChBut.setFont(VC.getFont(frac));
			VC.setAn(FC.encOKAn, w, h, encOKBut);
			encOKBut.setFont(VC.getFont(frac));
			VC.setAn(FC.encMPwd, w, h, encMPwd);
			encMPwd.setFont(VC.getFont(frac));
			VC.setAn(FC.encMPwd, w, h, encMPwdT);
			encMPwdT.setFont(VC.getFont(frac));

			VC.setAn(FC.encOvAn, w, h, encOvP);
			double eow = encOvP.getWidth();
			double eoh = encOvP.getHeight();			

			VC.setAn(FC.encOvClAn, eow, eoh, encOvClBut);
			VC.setAn(FC.encOvQuAn, eow, eoh, encOvQuest);
			VC.setAn(FC.encOvLaAn, eow, eoh, encOvNoMP);
			encOvNoMP.setFont(VC.getFont(frac));
			VC.setAn(FC.encOvLaAn, eow, eoh, encOvWrMP);
			encOvWrMP.setFont(VC.getFont(frac));

		} else if(decVSel) {
			VC.setAn(FC.back, w, h, decBaBut);
			VC.setAn(FC.empty, w, h, decV);
			VC.setAn(FC.decDelAn, w, h, decDelBut);
			VC.setAn(FC.decChAn, w, h, decChBut);
			decChBut.setFont(VC.getFont(frac));
			VC.setAn(FC.decShAn, w, h, decShBut);
			decShBut.setFont(VC.getFont(frac));
			VC.setAn(FC.decScAn, w, h, decSc);
			decCon.setMaxWidth(0.94 * decSc.getWidth());
			decCon.setMinWidth(0.94 * decSc.getWidth());

			for(int j = 0; j < decPwds.size(); j++) {
				decPwds.get(j).setPrefHeight(hM * h);
				decPwds.get(j).setPrefWidth(wM * w);
				decPwds.get(j).setMinHeight(hM * h);
				decPwds.get(j).setMinWidth(wM * w);
				decPwds.get(j).setMaxHeight(hM * h);
				decPwds.get(j).setMaxWidth(wM * w);
			}		
			for(int j = 0; j < decPwds.size(); j++) {
				if(decPwds.get(j).getGraphic() == null) {
					decPwds.get(j).setFont(VC.getFont(frac));
				}
			}

			VC.setAn(FC.decPwdAn, w, h, decPwd);
			decPwd.setFont(VC.getFont(frac));
			VC.setAn(FC.decPwdAn, w, h, decPwdT);
			decPwdT.setFont(VC.getFont(frac));;
			decOKBut.setFont(VC.getFont(frac));
			VC.setAn(FC.decOKAn, w, h, decOKBut);
			decCaBut.setFont(VC.getFont(frac));
			VC.setAn(FC.decCaAn, w, h, decCaBut);
			decSPwd.setFont(VC.getFont(frac));
			VC.setAn(FC.decBoxAn, w, h, decSPwd);

			VC.setAn(FC.decMsgAn, w, h, decMsgP);
			double dw = decMsgP.getWidth();
			double dh = decMsgP.getHeight();
			VC.setAn(FC.decClAn, dw, dh, decClI);
			VC.setAn(FC.decErrAn, dw, dh, decDoLa);
			VC.setAn(FC.decErrAn, dw, dh, decErrLa);
			VC.setAn(FC.decLaAn, dw, dh, decNoMP);
			decNoMP.setFont(VC.getFont(frac));
			VC.setAn(FC.decLaAn, dw, dh, decWrMP);
			decWrMP.setFont(VC.getFont(frac));
			VC.setAn(FC.decLaAn, dw, dh, decDel);
			decDel.setFont(VC.getFont(frac));
			VC.setAn(FC.decLaAn, dw, dh, decSuc);
			decSuc.setFont(VC.getFont(frac));

		} else if(newMPwdVSel) {

			VC.setAn(FC.empty, 0.0, 0.0, newMPwdView);
			VC.setAn(FC.back, w, h, newBaBut);
			chPwd.setFont(VC.getFont(frac));
			genPwd.setFont(VC.getFont(frac));
			togVBox.setSpacing(FC.vbspac * h);
			VC.setAn(FC.vboxAn, w, h, togVBox);

			chPwd.setFont(VC.getFont(1.08 * frac));
			genPwd.setFont(VC.getFont(1.08 * frac));
			VC.setAn(FC.newPwdAn, w, h, newPwd);
			newPwd.setFont(VC.getPwdFont(frac));
			VC.setAn(FC.newPwdAn, w, h, newPwdT);
			newPwdT.setFont(VC.getPwdFont(frac));
			VC.setAn(FC.repNewPwdAn, w, h, repNewPwd);
			repNewPwd.setFont(VC.getPwdFont(frac));
			VC.setAn(FC.repNewPwdAn, w, h, repNewPwdT);
			repNewPwdT.setFont(VC.getPwdFont(frac));
			VC.setAn(FC.newPwdValAn, w, h, newPwdValBut);
			newPwdValBut.setFont(VC.getFont(frac));
			VC.setAn(FC.newPwdDoAn, w, h, newMPDoBut);
			newMPDoBut.setFont(VC.getFont(frac));
			VC.setAn(FC.newPwdAgAn, w, h, newMPAgBut);
			newMPAgBut.setFont(VC.getFont(frac));
			newPwdS.setFont(VC.getFont(frac));
			VC.setAn(FC.newPwdChBAn, w, h, newPwdS);	

			if(Controller.getMasterPwdExists()) {
				VC.setAn(FC.oldPwdAn, w, h, oldPwd);
				oldPwd.setFont(VC.getPwdFont(frac));
				VC.setAn(FC.oldPwdAn, w, h, oldPwdT);
				oldPwdT.setFont(VC.getPwdFont(frac));
				VC.setAn(FC.lockLaAn, w, h, lockLa);
			}

			VC.setAn(FC.newPwdErrAn, w, h, newErrP);
			double nw = newErrP.getWidth();
			double nh = newErrP.getHeight();

			VC.setAn(FC.newPwdClAn, nw, nh, clNewErrP);
			VC.setAn(FC.newPwdErrIAn, nw, nh, newMPErrI);
			VC.setAn(FC.newPwdErrIAn, nw, nh, newMPSaI);		
			VC.setAn(FC.newPwdLaAn, nw, nh, newMPDiPwds);
			newMPDiPwds.setFont(VC.getFont(frac));
			VC.setAn(FC.newPwdLaAn, nw, nh, newMPWrMP);
			newMPWrMP.setFont(VC.getFont(frac));
			VC.setAn(FC.newPwdLaAn, nw, nh, newMPSa);
			newMPSa.setFont(VC.getFont(frac));
			VC.setAn(FC.newPwdLaAn, nw, nh, newMPNoF);
			newMPNoF.setFont(VC.getFont(frac));
			VC.setAn(FC.newPwdLaAn, nw, nh, newMPNoS);
			newMPNoS.setFont(VC.getFont(frac));			
			VC.setAn(FC.newPwdLaAn, nw, nh, newMPNoOld);
			newMPNoOld.setFont(VC.getFont(frac));
			VC.setAn(FC.newPwdLaAn, nw, nh, newMPTooShort);
			newMPTooShort.setFont(VC.getFont(frac));
		}
	}
-----------
	private void setDecBut() {
		decCon.getChildren().clear();
		decPwds = new ArrayList<Button>();
		decSel = new ArrayList<Boolean>();

		String[] existingNames = Controller.getExistingNameList();

		for(int j = 0; j < existingNames.length; j++) {
			ImageView img = logos.checkForExistence(existingNames[j]);

			Button toAdd;
			if(img == null) {
				toAdd = VC.getNewBut(existingNames[j], FC.empty, FC.inMT, false, decPwdButHa);
			} else {
				toAdd = VC.getNewImBut(img, wM * FC.inWi, hM * FC.inHe, decPwdButHa);
			}

			decPwds.add(toAdd);
			decSel.add(false);
		}

		try {
			for(int j = 0; j < decPwds.size(); j++) {
				decPwds.get(j).setPrefHeight(hM * scene.getHeight());
				decPwds.get(j).setPrefWidth(wM * scene.getWidth());
				decPwds.get(j).setMinHeight(hM * scene.getHeight());
				decPwds.get(j).setMinWidth(wM * scene.getWidth());
				decPwds.get(j).setMaxHeight(hM * scene.getHeight());
				decPwds.get(j).setMaxWidth(wM * scene.getWidth());
				GridPane.setRowIndex(decPwds.get(j), 1 + j / 4);
				GridPane.setColumnIndex(decPwds.get(j), 1 + j % 4);
				decCon.getChildren().add(decPwds.get(j));
			}
		} catch (Exception e) {
			for(int j = 0; j < decPwds.size(); j++) {
				decPwds.get(j).setPrefHeight(hM * FC.inHe);
				decPwds.get(j).setPrefWidth(wM * FC.inWi);
				decPwds.get(j).setMinHeight(hM * FC.inHe);
				decPwds.get(j).setMinWidth(wM * FC.inWi);
				decPwds.get(j).setMaxHeight(hM * FC.inHe);
				decPwds.get(j).setMaxWidth(wM * FC.inWi);
				GridPane.setRowIndex(decPwds.get(j), 1 + j / 4);
				GridPane.setColumnIndex(decPwds.get(j), 1 + j % 4);
				decCon.getChildren().add(decPwds.get(j));
			}
		}

		if(decPwds.size() == 0) {
			decShBut.setDisable(true);
			decChBut.setDisable(true);
			decDelBut.setDisable(true);
		}
		try {
			resizeComponents();
		} catch(Exception e) {
		}
	}
-------------
	private EventHandler<ActionEvent> newMPwdBaButHa = newBackEvent -> {

		VC.setDisSt(false, new Node[] {newPwd, newPwdT, repNewPwd, repNewPwdT, 
				oldPwd, oldPwdT, chPwd, genPwd, newPwdS, lockLa, newPwdValBut});
		VC.setDisSt(true, new Node[] {newMPDoBut, newMPAgBut});
		VC.setVis(false, new Node[] {newMPDoBut, newMPAgBut});
		VC.setVis(true, new Node[] {newPwdValBut});
		clNewErrP.fire();
		VC.resetFields(new TextField[] {newPwd, newPwdT, repNewPwd, repNewPwdT, oldPwd, oldPwdT});
		newMPwdVSel = false;
		menuOpVSel = true;
		mainFrame.getChildren().clear();
		mainFrame.getChildren().add(menuOp);
		resizeComponents();
	};
---------------
	private EventHandler<ActionEvent> decButHa = decEvent -> {

		VC.clearPane(movErrP);
		VC.clearPane(userMan);
		encErrOcc = false;
		decErrOccNoMP = false;
		decErrOccNoPw = false;

		userManOp = false;
		userMan.toBack();
		if(!Controller.getMasterPwdExists()) {
			movErrP.getChildren().addAll(movDecNoMPLa, movClErrP, errorI);
			VC.decoratePane(movErrP, FC.errMsgBord, FC.errMsgBa);
			decErrOccNoMP = true;
			movErrP.toFront();
			movDecNoMPLa.toFront();
			resizeComponents();

		} else if(Controller.getNumOfPwds() == 0) {
			movErrP.getChildren().addAll(movDecNoPwsLa, movClErrP, errorI);
			VC.decoratePane(movErrP, FC.errMsgBord, FC.errMsgBa);
			decErrOccNoPw = true;
			resizeComponents();
			movErrP.toFront();

		} else {
			menuOpVSel = false;
			decVSel = true;
			mainFrame.getChildren().clear();
			mainFrame.getChildren().add(decV);
			setDecBut();
			resizeComponents();
		}
	};
----------------
	private EventHandler<ActionEvent> encButHa = encEvent -> {
		encErrOcc = false;
		decErrOccNoMP = false;
		decErrOccNoPw = false;
		VC.clearPane(userMan);
		VC.clearPane(movErrP);
		userManOp = false;
		if(!Controller.getMasterPwdExists()) { 
			movErrP.getChildren().addAll(movEncNoMPLa, movClErrP, errorI);
			VC.decoratePane(movErrP, FC.errMsgBord, FC.errMsgBa);
			encErrOcc = true;

			resizeComponents();
			movErrP.toFront();
		} else {
			menuOpVSel = false;
			encVSel = true;
			mainFrame.getChildren().clear();
			mainFrame.getChildren().add(encV);
			resizeComponents();
		}
	};
----------------
	/** @author tmf
	 *  
	 * used Password.getAllDecrypted() in Controller.getPwds()
	 * 			-> Password.getAllDecrypted() gives String Array with user important information
	 * 							^ [0] : associate
	 * 							^ [1] : description
	 * 							^ [2] : username
	 * 							^ [3] : password
	 */
	private void chShMethod() {

		ocSt = new Stage();
		ocMainFrame = new AnchorPane();

		double ocInWi = 0.4 * scene.getWidth();
		double ocInHe = 0.9 * scene.getHeight();

		ocStSc = VC.getNewScP(FC.ocScAn, ocInWi, ocInHe);

		ocStCon = new GridPane();
		ocStCon.setMaxHeight(ocInHe);
		ocStCon.setMaxWidth(0.95 * ocInWi);

		ocStSc.setContent(ocStCon);

		double font = (scene.getWidth() + scene.getHeight()) / FC.butDiv;

		ArrayList<Password> toShow = Controller.getPwds(decSel);
		ocStTs = new ArrayList<TextField>();
		ocStOldVals = new ArrayList<String>();

		for(int j = 0; j < toShow.size(); j++) {
			TextField n = VC.getOcTField(names.encNN, toShow.get(j).getAssociate(), 5*j+1, 1, ocInWi, 0.11*ocInHe, font);

			n.textProperty().addListener((observable, oldVal, newVal) -> {
				if(newVal.equals("")) {
					VC.setTextFieldError(ocStOK, n);
				} else {
					n.setBackground(FC.empBa);
					n.setBorder(FC.encBord);
				}
			});


			TextField un = VC.getOcTField(names.encUNN, toShow.get(j).getUsername(), 5*j+2, 1, ocInWi, 0.11*ocInHe, font);

			TextField pwd = VC.getOcTField(names.encPwdN, toShow.get(j).getPassword(), 5*j+3, 1, 0.5*ocInWi, 0.11*ocInHe, font);		

			TextField pwdRep = VC.getOcTField(names.encRepPwdN, toShow.get(j).getPassword(), 5*j+3, 2, 0.5*ocInWi, 0.11*ocInHe, font);

			pwd.textProperty().addListener((observable, oldVal, newVal) -> {
				if(newVal.equals("")) {
					VC.setTextFieldError(ocStOK, pwd);
				} else if(!newVal.equals(pwdRep.getText())) {
					VC.setTextFieldError(ocStOK, pwd, pwdRep);
				} else if(pwdRep.getText().equals("")) {
					VC.setTextFieldValid(ocStOK, pwd);
				} else {
					VC.setTextFieldValid(ocStOK, pwd, pwdRep);
				}
			});

			pwdRep.textProperty().addListener((observable, oldVal, newVal) -> {
				if(newVal.equals("")) {
					VC.setTextFieldError(ocStOK, pwdRep);
					pwdRep.setBackground(FC.newMPErrBa);
					pwdRep.setBorder(FC.newMPErrBord);
				} else if(!newVal.equals(pwd.getText())) {
					VC.setTextFieldError(ocStOK, pwd, pwdRep);
				} else if(pwd.getText().equals("")) {
					VC.setTextFieldValid(ocStOK, pwdRep);
				} else {
					VC.setTextFieldValid(ocStOK, pwd, pwdRep);
				}
			});	

			TextField com = VC.getOcTField(names.encComN, toShow.get(j).getDescription(), 5*j+4, 1, ocInWi, 0.11*ocInHe, font);
			TextField emp = VC.getOcTField("", "", 5*j+5, 1, ocInWi, 0.11*ocInHe, font);
			
			VC.addTexts(ocStTs, new TextField[] {n, un, pwd, pwdRep, com});

			VC.addStrings(ocStOldVals, new String[] {toShow.get(j).getAssociate(), toShow.get(j).getUsername(),
					toShow.get(j).getPassword(), toShow.get(j).getPassword(), toShow.get(j).getDescription()});
			if(j != toShow.size() - 1) {
				ocStOldVals.add("");
			}
			
			ocStCon.getChildren().addAll(n, un, pwd, pwdRep, com);

			n.setDisable(true);
			emp.setDisable(true);
			
			if(j != toShow.size() - 1) {
				ocStCon.getChildren().add(emp);
				VC.addTexts(ocStTs, new TextField[] {emp});
			}
				
			if(decShSel) {
				VC.setDisSt(true, new Node[] {un, pwd, pwdRep, com});
			}
		}

		ocStButP = VC.getNewAnP(FC.ocButPAn, ocInWi, ocInHe);

		ocStCl = VC.getOcStBut(FC.ocCaAn, names.ocStDo, font, ocInWi, ocStButP.getHeight(), ocCOCHa);
		ocStOK = VC.getOcStBut(FC.ocOKAn, names.ocStOv, font, ocInWi, ocStButP.getHeight(), ocCOCHa);
		ocStCh = VC.getOcStBut(FC.ocChAn, names.ocStCh, font, ocInWi, ocStButP.getHeight(), ocCOCHa);

		ocStButP.getChildren().addAll(ocStCl, ocStOK, ocStCh);

		if(decShSel) {
			VC.setNodesUnusable(new Node[] {ocStOK});
		} else if(decChSel) {
			VC.setNodesUnusable(new Node[] {ocStCh});
		}

		ocMainFrame.getChildren().addAll(ocStSc, ocStButP);

		ocSt.initOwner(stage);
		ocSt.centerOnScreen();
		ocSt.initModality(Modality.WINDOW_MODAL);

		ocScene = new Scene(ocMainFrame, ocInWi, ocInHe);
		ocSt.initStyle(StageStyle.UTILITY);

		ocSt.setScene(ocScene);
		ocSt.setTitle(names.ocStTit);
		ocSt.setOnCloseRequest(confStageClHa);

		ocSt.setMinHeight(ocInHe);
		ocSt.setMaxHeight(ocInHe);
		ocSt.setMinWidth(ocInWi);
		ocSt.setMaxHeight(ocInWi);
		
		
		setOcKeys();
		ocSt.show();
		ocSt.setResizable(false);
		
		ocStCl.requestFocus();
	}
-------------------
	private void setOcKeys() {
		
		fireOnOc = e -> {
			if(names.ocChangeKey.equals(e.getCode())) {
				ocStCh.fire();
			} else if(names.ocDoneKey.equals(e.getCode())) {
				ocStCl.fire();
			} else if(names.ocOverKey.equals(e.getCode())) {
				ocStOK.fire();
			} 
		};
		ocSt.addEventHandler(KeyEvent.KEY_PRESSED, fireOnOc);
		
		fireOnOcEsc = esc -> {
			if(names.exitKey.equals(esc.getCode())) {
				ocSt.fireEvent(new WindowEvent(ocSt, WindowEvent.WINDOW_CLOSE_REQUEST));
			}
		};
		ocSt.addEventHandler(KeyEvent.KEY_PRESSED, fireOnOcEsc);
	}
---------------
	private EventHandler<ActionEvent> ocCOCHa = ocCaOKChEvent -> {
		if(ocCaOKChEvent.getSource().equals(ocStCl)) {
			if(decShSel) {
				ocSt.close();
				decPwd.setText("");
				decPwdT.setText("");
				decCaBut.fire();
				for(int j = 0; j < decPwds.size(); j++) {
					if(decSel.get(j)) {
						decPwds.get(j).fire();
					}
				}
			} else {
				ocSt.fireEvent(new WindowEvent(ocSt, WindowEvent.WINDOW_CLOSE_REQUEST));
			}
		} else if(ocCaOKChEvent.getSource().equals(ocStOK)) {
			ArrayList<String> toStore = new ArrayList<String>();
			for(int j = 0; j < ocStTs.size(); j++) {
				if(j % 6 != 5) {
					toStore.add(ocStTs.get(j).getText());
				}
			}
			Controller.storeEntryChanges(toStore);
			ocSt.close();
			decCaBut.fire();
			for(int j = 0; j < decPwds.size(); j++) {
				if(decSel.get(j)) {
					decPwds.get(j).fire();
				}
			}
			decMsgP.getChildren().addAll(decClI, decDoLa, decSuc);
			VC.decoratePane(decMsgP, FC.newMPDoBord, FC.newMPDoBa);
		} else if(ocCaOKChEvent.getSource().equals(ocStCh)) {
			VC.setNodesUnusable(new Node[] {ocStCh});
			VC.setNodesUsable(new Node[] {ocStOK});
			for(int j = 0; j < ocStTs.size(); j++) {
				if(j % 6 != 0 && j % 6 != 5) {
					ocStTs.get(j).setDisable(false);
				}
			}
			decShSel = false;
			decChSel = true;
		}
	};
----------------
	private EventHandler<WindowEvent> confStageClHa = stageCloseEvent -> {
		if(!decShSel) {

			boolean hasChanged = false;
			for(int j = 0; j < ocStOldVals.size(); j++) {
				if(!ocStOldVals.get(j).equals(ocStTs.get(j).getText())) {
					hasChanged = true;
					break;
				}
			}

			if(hasChanged) {
				
				Alert exit = new Alert(AlertType.CONFIRMATION);

				exit.initOwner(ocSt);
				exit.getButtonTypes().clear();
				exit.setTitle(names.ocTit);
				exit.setHeaderText(names.ocHeadT);
				exit.setContentText(names.ocConT);
				ButtonType buttonTypeYes = new ButtonType(names.conExitYN, ButtonBar.ButtonData.CANCEL_CLOSE);
				ButtonType buttonTypeNo = new ButtonType(names.conExitNN, ButtonBar.ButtonData.OK_DONE);
				exit.getButtonTypes().addAll(buttonTypeYes, buttonTypeNo);

				Button exitYesButton = (Button) exit.getDialogPane().lookupButton(buttonTypeYes);
				Button exitNoButton = (Button) exit.getDialogPane().lookupButton(buttonTypeNo);
				exitNoButton.setDefaultButton(false);
				exitYesButton.setDefaultButton(true);
				EventHandler<KeyEvent> fireOnKey = e -> {
					if(e.getTarget() instanceof Button && (KeyCode.ENTER.equals(e.getCode()))) {
						((Button) e.getTarget()).fire();
					} else if(e.getTarget() instanceof Button && names.confirmExitNoKey.equals(e.getCode())) {
						exitNoButton.fire();
					} else if(e.getTarget() instanceof Button && names.confirmExitYesKey.equals(e.getCode())) {
						exitYesButton.fire();
					} else if(e.getTarget() instanceof Button && names.confirmExitEscKey.equals(e.getCode())) {
						exitNoButton.fire();
					}
				};
				DialogPane dialogPane = exit.getDialogPane();
				dialogPane.getButtonTypes().stream().map(dialogPane::lookupButton).forEach(
						button -> button.addEventHandler(KeyEvent.KEY_PRESSED, fireOnKey));
				Optional<ButtonType> result = exit.showAndWait();
				if(result.get() == buttonTypeYes) {			
				} else {
					stageCloseEvent.consume();
					return;
				}
			}
		}
		decCaBut.fire();
		
		for(int j = 0; j < decPwds.size(); j++) {
			if(decSel.get(j)) {
				decPwds.get(j).fire();
			}
		}
	};
----------------
	private void afterSuccessfulPwdVal(String pwd, boolean isGenerated) {
		Controller.setChangesMade();
//		Controller.setMasterPassword(pwd);
		Controller.setMasterPwdExists(true);
		newErrP.getChildren().addAll(clNewErrP, newMPSaI, newMPSa);
		VC.decoratePane(newErrP, FC.newMPDoBord, FC.newMPDoBa);
		VC.resetFields(new TextField[] {newPwd, newPwdT, repNewPwd, repNewPwdT, oldPwd, oldPwdT});

		newMPSa.setText(names.newMPSN + pwd);

		newPwdS.setSelected(false);
		chPwd.setSelected(true);

		VC.setDisSt(true, new Node[] {newPwdValBut, newPwd, newPwdT, repNewPwd, 
				repNewPwdT, oldPwd, oldPwdT, chPwd, genPwd, newPwdS, lockLa});
		VC.setDisSt(false, new Node[] {newMPDoBut, newMPAgBut});
		VC.setVis(true, new Node[] {newMPDoBut, newMPAgBut});
		VC.setVis(false, new Node[] {newPwdValBut});		
	}
-------------------


